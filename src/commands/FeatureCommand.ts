import { SlashCommandBuilder, ChatInputCommandInteraction, Collection } from 'discord.js';
import Command from '@/types/Command';


// l·∫•y avatar c·ªßa ng∆∞·ªùi kh√°c
const GetUserAvatarCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('avatar')
    .setDescription('L·∫•y avatar c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c')
    .addUserOption(option =>
      option.setName('target')
        .setDescription('Ng∆∞·ªùi d√πng m√† b·∫°n mu·ªën l·∫•y avatar')
        .setRequired(false)),
  async execute(interaction: ChatInputCommandInteraction) {
    try {
      const target = interaction.options.getUser('target') || interaction.user;
      const avatarUrl = target.displayAvatarURL({ size: 256, extension: 'png', forceStatic: false });
      
      const embed = {
        color: 0x0099ff,
        title: `${target.username}'s Avatar`,
        image: {
          url: avatarUrl,
        },
        footer: {
          text: 'Y√™u c·∫ßu b·ªüi: ' + interaction.user.username
        }
      };
      await interaction.reply({ embeds: [embed] });
    } catch (error) {
      console.error("\x1b[31m%s\x1b[0m", "L·ªói l·ªánh avatar:", error);
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y avatar!', ephemeral: true });
      } else {
        await interaction.reply({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y avatar!', ephemeral: true });
      }
    }
  }
};

// L·∫Øc x√≠ ng·∫ßu
const RollDiceCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('roll')
    .setDescription('L·∫Øc x√≠ ng·∫ßu'),
  async execute(interaction: ChatInputCommandInteraction) {
    try {
      const result = Math.floor(Math.random() * 6) + 1;
      await interaction.reply(`üé≤ B·∫°n ƒë√£ l·∫Øc ƒë∆∞·ª£c: ${result}`);
    } catch (error) {
      console.error("\x1b[31m%s\x1b[0m", "L·ªói l·ªánh roll:", error);
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫Øc x√≠ ng·∫ßu!', ephemeral: true });
      } else {
        await interaction.reply({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫Øc x√≠ ng·∫ßu!', ephemeral: true });
      }
    }
  }
};

// Tung xu
const FlipCoinCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('flip')
    .setDescription('Tung ƒë·ªìng xu'),
  async execute(interaction: ChatInputCommandInteraction) {
    try {
      const result = Math.random() < 0.5 ? 'Ng·ª≠a' : 'S·∫•p';
      await interaction.reply(`ü™ô K·∫øt qu·∫£: ${result}`);
    } catch (error) {
      console.error("\x1b[31m%s\x1b[0m", "L·ªói l·ªánh flip:", error);
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi tung ƒë·ªìng xu!', ephemeral: true });
      } else {
        await interaction.reply({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi tung ƒë·ªìng xu!', ephemeral: true });
      }
    }
  }
};

// L·∫•y ping c·ªßa bot 
const GetPingCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('ping')
    .setDescription('Ping c·ªßa bot?'),
  async execute(interaction: ChatInputCommandInteraction) {
    const client = interaction.client;
    await interaction.reply(`üèì Pong! ${client.ws.ping}ms`);
  }
};

// Shiping :')
const ShipCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('ship')
    .setDescription('Ship 2 ng∆∞·ªùi v√† ki·ªÉm tra ƒë·ªô t∆∞∆°ng th√≠ch')
    .addUserOption(option =>
      option.setName('user1')
        .setDescription('Ng∆∞·ªùi d√πng 1')
        .setRequired(true))
    .addUserOption(option =>
      option.setName('user2')
        .setDescription('Ng∆∞·ªùi d√πng 2')
        .setRequired(true)),
  async execute(interaction: ChatInputCommandInteraction) {
    const user1 = interaction.options.getUser('user1');
    const user2 = interaction.options.getUser('user2');
    
    if (!user1 || !user2) {
      await interaction.reply('Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng');
      return;
    }
    
    const compatibility = Math.floor(Math.random() * 100) + 1;
    const embed = {
      color: 0x0099ff,
      title: `${user1.username} v√† ${user2.username}`,
      description: `ƒê·ªô t∆∞∆°ng th√≠ch: ${compatibility}%`,
      image: {
        url: `https://cdn.discordapp.com/emojis/1369493738266693692.webp?size=128`
      }
    };
    await interaction.reply({ embeds: [embed] });
  }
}; 

const commandModules = [GetUserAvatarCommand, RollDiceCommand, FlipCoinCommand, GetPingCommand, ShipCommand];

const featureCommands = new Collection<string, Command>();

for (const command of commandModules) {
  featureCommands.set(command.data.name, command);
}

export default featureCommands;