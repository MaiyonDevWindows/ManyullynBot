import { SlashCommandBuilder, AttachmentBuilder } from 'discord.js';
import { createCanvas } from 'canvas';

// ? Danh s√°ch s·ª± ki·ªán c√≥ th·ªÉ ch√∫c
const EVENTS = [
    // * Th√°ng 1.
    { eventId: 1, nameVn: "T·∫øt D∆∞∆°ng L·ªãch", nameEn: "New Year's Day", value: "newYearDay" }, // 1/1 - Ng√†y ƒë·∫ßu nƒÉm m·ªõi
    { eventId: 2, nameVn: "T·∫øt Nguy√™n ƒê√°n", nameEn: "Lunar New Year", value: "lunarNewYearDay" }, // T·∫øt √Çm L·ªãch
    // * Th√°ng 2.
    { eventId: 3, nameVn: "Valentine", nameEn: "Valentine's Day", value: "valentinesDay" }, // 14/2 - L·ªÖ t√¨nh nh√¢n
    // * Th√°ng 3.
    { eventId: 4, nameVn: "Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ 8/3", nameEn: "International Women's Day", value: "womensday" }, // 8/3
    // * Th√°ng 4.
    // * Th√°ng 5.
    // * Th√°ng 6.
    // * Th√°ng 7.
    // * Th√°ng 8.
    // * Th√°ng 9.
    // * Th√°ng 10.
    // * Th√°ng 11.
    // * Th√°ng 12.
    { eventId: 5, nameVn: "Gi√°ng Sinh", nameEn: "Christmas", value: "christmas" }, // 25/12 - Noel
    // * S·ª± ki·ªán ƒë·∫∑c bi·ªát.
    { eventId: 6, nameVn: "Sinh nh·∫≠t c·ªßa t√¥i", nameEn: "My Birthday", value: "myBirthday" }, // Sinh nh·∫≠t c·ªßa ch√≠nh m√¨nh
    { eventId: 7, nameVn: "Sinh nh·∫≠t ng∆∞·ªùi ƒë·∫∑c bi·ªát", nameEn: "Special Someone's Birthday", value: "specialBirthday" } // Sinh nh·∫≠t c·ªßa ng∆∞·ªùi quan tr·ªçng
    // * S·ª± ki·ªán kh√°c (ch·ªâ c·∫ßn nh·∫Øc l·∫°i, kh√¥ng c·∫ßn ch√∫c hay t·∫∑ng qu√† g√¨ th√™m).
];

export const data = new SlashCommandBuilder()
    .setName('greet')
    .setDescription('üéâ G·ª≠i m·ªôt l·ªùi ch√∫c t·ªõi ng∆∞·ªùi ƒë·∫∑c bi·ªát c·ªßa b·∫°n!')
    .addStringOption(option =>
        option.setName('event')
            .setDescription('Ch·ªçn s·ª± ki·ªán mu·ªën ch√∫c')
            .setRequired(true)
            .addChoices(
                { name: 'Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ 8/3', value: 'womensday' },
                { name: 'Sinh nh·∫≠t', value: 'birthday' },
                { name: 'NƒÉm m·ªõi', value: 'newyear' },
                { name: 'Gi√°ng sinh', value: 'christmas' }
            )
    )
    .addUserOption(option =>
        option.setName('user')
            .setDescription('Ng∆∞·ªùi b·∫°n mu·ªën ch√∫c')
            .setRequired(true)
    )
    .addStringOption(option =>
        option.setName('message')
            .setDescription('L·ªùi ch√∫c d√†nh cho h·ªç')
            .setRequired(true)
    );

export async function execute(interaction) {
    const eventKey = interaction.options.getString('event');
    const user = interaction.options.getUser('user');
    const message = interaction.options.getString('message');
    // * Xo√° to√†n b·ªô d·∫•u `|`
    const cleanMessage = message.replace(/\|/g, '');
    const username = user.username;
    // * Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu trong t√™n
    const formattedUsername = username.charAt(0).toUpperCase() + username.slice(1).toLowerCase();

    // X√°c ƒë·ªãnh t√™n s·ª± ki·ªán t·ª´ danh s√°ch EVENTS
    const eventName = EVENTS[eventKey] || "S·ª± ki·ªán ƒë·∫∑c bi·ªát";

    const imageBuffer = await generateEventImage(formattedUsername, eventName, message);
    const attachment = new AttachmentBuilder(imageBuffer, { name: 'SPOILER_event_greeting.png' });

    try {
        // G·ª≠i l·ªùi ch√∫c v√†o k√™nh chung
        await interaction.reply({
            content: `üéâ **${interaction.user} ch√∫c m·ª´ng ${eventName} ƒë·∫øn ${user}!**\nüí¨ *"${cleanMessage}"*`,
            files: [attachment]
        });

        // G·ª≠i l·ªùi ch√∫c qua DM
        await user.send({
            content: `üéâ **${interaction.user.username} ch√∫c b·∫°n m·ªôt ${eventName} vui v·∫ª!**\nüí¨ *"${cleanMessage}"*`,
            files: [attachment]
        });

        // Th√¥ng b√°o (ch·ªâ n·∫øu g·ª≠i DM th√†nh c√¥ng)
        await interaction.followUp({ content: `üì© ƒê√£ g·ª≠i l·ªùi ch√∫c ${eventName} ƒë·∫øn ${user.username} qua DM!`, ephemeral: true });

    } catch (error) {
        console.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn DM cho ${user.username}:`, error);

        // N·∫øu g·ª≠i DM th·∫•t b·∫°i, th√¥ng b√°o l·ªói (kh√¥ng d√πng reply n·ªØa, m√† d√πng followUp)
        await interaction.followUp({ content: `‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ${user.username}, c√≥ th·ªÉ h·ªç ƒë√£ t·∫Øt DM t·ª´ bot.`, ephemeral: true });
    }
}

// H√†m v·∫Ω ·∫£nh ch√∫c m·ª´ng
async function generateEventImage(username, eventName, message) {
    const width = 600;
    const height = 400;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // V·∫Ω n·ªÅn tr·∫Øng.
    ctx.fillStyle = '#ffffff'; // M√†u tr·∫Øng.
    ctx.fillRect(0, 0, width, height);

    // V·∫Ω tr√°i tim m√†u h·ªìng.
    ctx.fillStyle = '#ff4b71';
    ctx.beginPath();
    ctx.moveTo(300, 100);
    ctx.bezierCurveTo(400, 10, 550, 200, 300, 350);
    ctx.bezierCurveTo(50, 200, 200, 10, 300, 100);
    ctx.fill();

    // * Vi·∫øt t√™n s·ª± ki·ªán (Ch·ªØ m√†u n√¢u ch√†m)
    ctx.font = '20px sans-serif';
    ctx.textAlign = 'center';

    ctx.lineWidth = 4;
    ctx.fillStyle = '#6b343f'; // Ch·ªØ m√†u t√≠m nh·∫°t (Thistle)
    ctx.fillText(`üíñ Ch√∫c m·ª´ng ${eventName}, ${username}! üíñ`, width / 2, 50);

    // * Vi·∫øt n·ªôi dung l·ªùi ch√∫c
    ctx.font = '18px sans-serif';
    ctx.textAlign = 'center';

    // * Chia nh·ªè c√¢u theo k√Ω t·ª± `|`
    const greetlines = message.split('|');

    let startY = 170;
    greetlines.forEach((line, i) => {
        ctx.fillStyle = '#ffffff';
        ctx.fillText(line.trim(), width / 2, startY + i * 25); // * Gi·ªØ kho·∫£ng c√°ch d√≤ng 25px
    });

    return canvas.toBuffer();
}
